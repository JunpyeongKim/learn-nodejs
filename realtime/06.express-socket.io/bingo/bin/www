#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bingo:server');
var http = require('http');
var socketio = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var users = {};
var user_count = 0;
var turn_count = 0;

io = socketio.listen(server);
io.sockets.on('connection', function (socket) {

    console.log('io.connection:', socket.id);

    socket.on('join', function (data) {
        var username = data.username;

        socket.username = username;

        users[user_count] = {};
        users[user_count].name = username;
        users[user_count].turn = false;

        io.sockets.emit('update_users', users);

        user_count++;
    });

    socket.on('game_start', function (data) {
        socket.broadcast.emit('game_started', data);
        users[turn_count].turn = true;

        io.sockets.emit('update_users', users);
    });

    socket.on('select', function (data) {
        socket.broadcast.emit('check_number', data);

        users[turn_count].turn = false;
        turn_count++;
        if (turn_count >= user_count) {
            turn_count = 0;
        }
        users[turn_count].turn = true;

        io.sockets.emit('update_users', users);
    });

    socket.on('disconnect', function () {
        delete users[socket.username];

        io.sockets.emit('update_users', users);

        user_count--;
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
