#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('expressjs:server');
var http = require('http');
    // module.exports vs. exports
    // commonJS

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
    // http.createServer([requestListener])
    // - Returns a new instance of http.Server
    //      - https://nodejs.org/api/http.html#http_class_http_server
    //      - Event: request, connection, close, checkContinue, connect, upgrade, clientError
    //          - https://nodejs.org/api/events.html#events_events
    //      - Method: listen(), close(), maxHeadersCount, setTimeout(), timeout
    // - https://nodejs.org/api/http.html#http_http_createserver_requestlistener

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
    // When an EventEmitter instance experiences an error, the typical action is to emit an 'error' event.
    // If there is no listener for it, then the default action is to print stack trace and exit the program.
    // - https://nodejs.org/api/events.html#events_class_events_eventemitter
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
    // named pipe

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
      // If you got a system error, include the syscall property to say which syscall failed,
      // and the errno property to say which system errno you got back.
      // - https://www.joyent.com/developers/node/design/errors

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
      case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
          // https://nodejs.org/api/process.html#process_process_exit_code
          // - 0 : success, 1 : failure
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
          // When an EventEmitter instance experiences an error, the typical action is to emit an 'error' event.
          // If there is no listener for it, then the default action is to print stack trace and exit the program.
          // - https://nodejs.org/api/events.html#events_class_events_eventemitter
  }
}
    // error.syscall
    // error.code

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
    // named pipe
